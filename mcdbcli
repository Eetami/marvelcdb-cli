#!/bin/bash

declare MCDB_API_URL='https://marvelcdb.com/api/public'
declare CARDS_CACHE="${HOME}/.mcdb/cards"
declare RELEASE_ORDER=false
declare -a CARD_IDS

print_faction_color() {
  local faction_code="$1"
  case $faction_code in
    'aggression')
      printf '\e[91m'
      ;;
    'justice')
      printf '\e[93m'
      ;;
    'leadership')
      printf '\e[96m'
      ;;
    'protection')
      printf '\e[92m'
      ;;
    'pool')
      printf '\e[95m'
      ;;
    'basic')
      printf '\e[90m'
      ;;
    'hero')
      printf '\e[0m'
      ;;
  esac
}

get_wave_number() {
  local pack_id=${1:0:2}
  local -i pack_number=${pack_id#0}

  if [ $pack_number -lt 11 ]; then
    echo 1
  elif [ $pack_number -lt 16 ]; then
    echo 2
  elif [ $pack_number -lt 21 ]; then
    echo 3
  elif [ $pack_number -lt 27 ]; then
    echo 4
  elif [ $pack_number -lt 32 ]; then
    echo 5
  elif [ $pack_number -lt 39 ]; then
    echo 6
  elif [ $pack_number -lt 45 ]; then
    echo 7
  elif [ $pack_number -lt 50 ]; then
    echo 8
  else
    echo 99
  fi
}

print_card() {
  local card_json="$1"
  local print_aspect_or_wave="$2"

  local card_id="$(jq -r '.code' <<<$card_json)"
  local aspect_or_wave
  if [ "$print_aspect_or_wave" = 'wave' ]; then
    aspect_or_wave="Wave #$(get_wave_number $card_id)"
  elif [ "$print_aspect_or_wave" = 'aspect' ]; then
    aspect_or_wave="Aspect: $(jq -r '.faction_name' <<<"$card_json")"
  fi

  local wave_number=$(get_wave_number "$card_id")
  local amount=$(jq -nr "inputs | select(.card_id == \"$card_id\") | .amount" <<<"${CARD_IDS[*]}")
  local faction_code="$(jq -r '.faction_code' <<<$card_json)"
  local card_name="$(jq -r '.real_name' <<<$card_json)"
  local pack_name="$(jq -r '.pack_name' <<<$card_json)"
  local position="$(jq -r '.position' <<<$card_json)"

  printf '%d \u00D7 ' "$amount"

  print_faction_color "$faction_code"

  printf '%s\e[0m (\e[90m%s\e[0m %s #%d)\n' "$card_name" "$aspect_or_wave" "$pack_name" "$position"
}

get_card_file() {
  local card_id_json="$1"
  local amount="$(jq -r '.amount' <<<$card_id_json)"
  local card_id="$(jq -r '.card_id' <<<$card_id_json)"

  if [ ! -d $CARDS_CACHE ]; then
    mkdir -p $CARDS_CACHE
  fi

  if [ ! -f $CARDS_CACHE/$card_id ]; then
    curl -so $CARDS_CACHE/$card_id "${MCDB_API_URL}/card/${card_id}"
  fi

  echo "$CARDS_CACHE/$card_id"
}

print_faction_heading() {
  local faction_code="$1"

  print_faction_color $faction_code

  printf '=== '

  case $faction_code in
    'aggression')
      printf 'Aggression cards'
      ;;
    'justice')
      printf 'Justice cards'
      ;;
    'leadership')
      printf 'Leadership cards'
      ;;
    'protection')
      printf 'Protection cards'
      ;;
    'pool')
      printf "'Pool cards"
      ;;
    'basic')
      printf 'Basic cards'
      ;;
    'hero')
      printf 'Hero cards'
      ;;
  esac

  printf ' ===\e[0m\n'
}

print_factions() {
  local cards_json="$1"

  local IFS='
'
  for faction_json in $(jq -c '.[]' <<<"$cards_json"); do
    local faction_code=$(jq -r '.[0].faction_code' <<<"$faction_json")
    print_faction_heading $faction_code
    for card_json in $(jq -c '.[]' <<<"$faction_json"); do
      print_card "$card_json" 'wave'
    done
  done
}

print_waves() {
  local cards_json="$1"

  local IFS='
'
  for wave_json in $(jq -c '.[]' <<<"$cards_json"); do
    local card_id=$(jq -r '.[0].code' <<<"$wave_json")
    local wave_number=$(get_wave_number $card_id)
    printf '=== Wave #%d ===\n' "$wave_number"
    for card_json in $(jq -c '.[]' <<<"$wave_json"); do
      print_card "$card_json" 'aspect'
    done
  done
}

print_deck() {
  local deck="$1"

  local deck_name=$(jq -r '.name' <<<"$deck")

  printf '%s\n' "$deck_name"

  CARD_IDS=($(jq -c '.slots | to_entries | .[] | {card_id: .key, amount: .value}' <<<$deck))

  local -a card_files
  for card_id_json in "${CARD_IDS[@]}"; do
    card_files+=($(get_card_file $card_id_json))
  done

  if $RELEASE_ORDER; then
    local cards_json=$(jq -cn '[inputs] | group_by(.code | .[0:2] | tonumber |
    if . < 11 then 1
    elif . < 16 then 2
    elif . < 21 then 3
    elif . < 27 then 4
    elif . < 32 then 5
    elif . < 39 then 6
    elif . < 45 then 7
    elif . < 50 then 8
    else 99 end)' "${card_files[@]}")
    print_waves "$cards_json"
  else
    local cards_json=$(jq -cn '[inputs] | group_by(.faction_code |
      if . == "hero" then 1
      elif . == "aggression" then 2
      elif . == "justice" then 3
      elif . == "leadership" then 4
      elif . == "protection" then 5
      elif . == "pool" then 5
      elif . == "basic" then 6
      else 99 end)' "${card_files[@]}")
    print_factions "$cards_json"
  fi
}

while getopts 'd:l:r' opt; do
  case $opt in
    d)
      deck_json="$(curl -s "${MCDB_API_URL}/deck/${OPTARG}")"
      ;;
    l)
      deck_json="$(curl -s "${MCDB_API_URL}/decklist/${OPTARG}")"
      ;;
    r)
      RELEASE_ORDER=true
      ;;
  esac
done

if [ -z "$deck_json" ]; then
  read -rd '' deck_json
fi

print_deck "$deck_json"
