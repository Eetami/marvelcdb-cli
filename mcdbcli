#!/bin/bash

declare MCDB_API_URL='https://marvelcdb.com/api/public'
declare MCDB_CACHE="${HOME}/.mcdb"
declare PACKS_CACHE="${MCDB_CACHE}/packs.json"
declare CARDS_CACHE="${MCDB_CACHE}/cards"
declare ALPHABETICAL_ORDER=false
declare PACK_ORDER=false
declare RELEASE_ORDER=false
declare SUPER_ALPHABETICAL_ORDER=false
declare WAVE_ORDER=false
declare DECK_JSON

init_packs() {
  if [ ! -d $MCDB_CACHE ]; then
    mkdir -p $MCDB_CACHE
  fi

  if [ ! -f $PACKS_CACHE ]; then
    curl -so "$PACKS_CACHE" "${MCDB_API_URL}/packs/"
  fi

  local -a pack_positions=($(jq -r '.[] | @text "\(.code)=\(.position)"' <$PACKS_CACHE))
  export "${pack_positions[@]}"
}

print_faction_color() {
  local faction_code="$1"
  case $faction_code in
    'aggression')
      printf '\e[91m'
      ;;
    'justice')
      printf '\e[93m'
      ;;
    'leadership')
      printf '\e[96m'
      ;;
    'protection')
      printf '\e[92m'
      ;;
    'pool')
      printf '\e[95m'
      ;;
    'basic')
      printf '\e[90m'
      ;;
    'hero')
      printf '\e[90m'
      ;;
  esac
}

get_wave_number() {
  local pack_code=$1
  local pack_position=$(jq -nr --arg pack_code $pack_code 'env[$pack_code]')

  if [ $pack_position -lt 10 ]; then
    echo 1
  elif [ $pack_position -lt 16 ]; then
    echo 2
  elif [ $pack_position -lt 21 ]; then
    echo 3
  elif [ $pack_position -lt 27 ]; then
    echo 4
  elif [ $pack_position -lt 32 ]; then
    echo 5
  elif [ $pack_position -lt 40 ]; then
    echo 6
  elif [ $pack_position -lt 45 ]; then
    echo 7
  elif [ $pack_position -lt 50 ]; then
    echo 8
  else
    echo 99
  fi
}

print_card() {
  local card_json="$1"

  local card_id="$(jq -r '.code' <<<$card_json)"
  local pack_code="$(jq -r '.pack_code' <<<$card_json)"
  local wave_number=$(get_wave_number "$pack_code")
  local amount=$(jq -r --arg card_id $card_id '.slots[$card_id]' <<<"${DECK_JSON}")
  local faction_code="$(jq -r '.faction_code' <<<$card_json)"
  local card_name="$(jq -r '.real_name' <<<$card_json)"
  local pack_name="$(jq -r '.pack_name' <<<$card_json)"
  local position="$(jq -r '.position' <<<$card_json)"

  printf '  %d \u00D7 ' "$amount"

  print_faction_color "$faction_code"

  printf '%s\e[0m (\e[90mWave #%s\e[0m %s #%d)\n' "$card_name" "$wave_number" "$pack_name" "$position"
}

get_card_file() {
  local card_id="$1"

  if [ ! -d $CARDS_CACHE ]; then
    mkdir -p $CARDS_CACHE
  fi

  if [ ! -f $CARDS_CACHE/$card_id ]; then
    curl -so $CARDS_CACHE/$card_id "${MCDB_API_URL}/card/${card_id}"
  fi

  echo "$CARDS_CACHE/$card_id"
}

print_faction_heading() {
  local faction_code="$1"

  print_faction_color $faction_code

  printf ' '

  case $faction_code in
    'aggression')
      printf 'Aggression cards'
      ;;
    'justice')
      printf 'Justice cards'
      ;;
    'leadership')
      printf 'Leadership cards'
      ;;
    'protection')
      printf 'Protection cards'
      ;;
    'pool')
      printf "'Pool cards"
      ;;
    'basic')
      printf 'Basic cards'
      ;;
    'hero')
      local hero_name=$(jq -r '.investigator_name' <<<"$DECK_JSON")
      printf '%s cards' "$hero_name"
      ;;
  esac

  printf '\e[0m\n'
}

print_factions() {
  local cards_json="$1"

  local IFS='
'
  for faction_json in $(jq -c '.[]' <<<"$cards_json"); do
    local faction_code=$(jq -r '.[0].faction_code' <<<"$faction_json")
    print_faction_heading $faction_code
    for card_json in $(jq -c --arg alpha $ALPHABETICAL_ORDER 'if $alpha == "true"
    then sort_by(.real_name) | .[]
    else .[] end' <<<"$faction_json"); do
      print_card "$card_json"
    done
  done
}

group_by_faction() {
  local cards_json="$1"
  local IFS='
'
  jq -c 'group_by(.faction_code |
      if . == "hero" then 1
      elif . == "aggression" then 2
      elif . == "justice" then 3
      elif . == "leadership" then 4
      elif . == "protection" then 5
      elif . == "pool" then 5
      elif . == "basic" then 6
      else 99 end)' <<<"$cards_json"
}

print_waves() {
  local waves_json="$1"

  local IFS='
'
  for wave_json in $(jq -c '.[]' <<<"$waves_json"); do
    local pack_code=$(jq -r '.[0].pack_code' <<<"$wave_json")
    local wave_number=$(get_wave_number $pack_code)
    printf 'Wave #%d\n' "$wave_number"
    local faction_json=$(group_by_faction "$wave_json")
    print_factions "$faction_json"
  done
}

print_packs() {
  local packs_json="$1"

  local IFS='
'
  for pack_json in $(jq -c '.[]' <<<"$packs_json"); do
    local pack_name=$(jq -r '.[0].pack_name' <<<"$pack_json")
    printf '%s\n' "$pack_name"
    local faction_json=$(group_by_faction "$pack_json")
    print_factions "$faction_json"
  done
}

print_alphabetically() {
  local IFS='
'
  for card_json in $(jq -cn '[inputs] | sort_by(.real_name) | .[]' "$@"); do
    print_card "$card_json"
  done
}

print_cards() {
  local IFS='
'
  for card_json in $(jq -cn 'inputs' "$@"); do
    print_card "$card_json"
  done
}

print_deck() {
  local deck_name=$(jq -r '.name' <<<"$DECK_JSON")

  printf '%s\n' "$deck_name"

  local -a card_files
  for card_id_json in $(jq -r '.slots | keys | .[]' <<<"$DECK_JSON"); do
    card_files+=($(get_card_file $card_id_json))
  done

  if $SUPER_ALPHABETICAL_ORDER; then
    print_alphabetically "${card_files[@]}"
  elif $RELEASE_ORDER; then
    print_cards "${card_files[@]}"
  elif $WAVE_ORDER; then
    local cards_json=$(jq -cn '[inputs] | group_by(.pack_code as $pack | env[$pack] | tonumber |
    if . < 10 then 1
    elif . < 16 then 2
    elif . < 21 then 3
    elif . < 27 then 4
    elif . < 32 then 5
    elif . < 40 then 6
    elif . < 45 then 7
    elif . < 50 then 8
    else 99 end)' "${card_files[@]}")
    print_waves "$cards_json"
  elif $PACK_ORDER; then
    local cards_json=$(jq -cn '[inputs] | group_by(.pack_code as $pack | env[$pack])' "${card_files[@]}")
    print_packs "$cards_json"
  else
    local cards_json=$(jq -cn '[inputs] | group_by(.faction_code |
      if . == "hero" then 1
      elif . == "aggression" then 2
      elif . == "justice" then 3
      elif . == "leadership" then 4
      elif . == "protection" then 5
      elif . == "pool" then 5
      elif . == "basic" then 6
      else 99 end)' "${card_files[@]}")
    print_factions "$cards_json"
  fi
}

init_packs

while getopts 'd:l:aprw' opt; do
  case $opt in
    d)
      DECK_JSON="$(curl -s "${MCDB_API_URL}/deck/${OPTARG}")"
      ;;
    l)
      DECK_JSON="$(curl -s "${MCDB_API_URL}/decklist/${OPTARG}")"
      ;;
    a)
      if $ALPHABETICAL_ORDER; then
        SUPER_ALPHABETICAL_ORDER=true
      fi
      ALPHABETICAL_ORDER=true
      ;;
    p)
      PACK_ORDER=true
      ;;
    r)
      RELEASE_ORDER=true
      ;;
    w)
      WAVE_ORDER=true
      ;;
  esac
done

if [ -z "$DECK_JSON" ]; then
  if [ -t 0 ]; then
    printf '\e[91mNo input!\e[0m\n' >&2
    exit 1
  fi
  read -rd '' DECK_JSON
fi

print_deck
